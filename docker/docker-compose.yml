version: "3.8"
services:
  server:
    image: server
    container_name: server
    ports:
      - "3001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    build:
      context: ../server
      dockerfile: ../docker/Dockerfiles/Server.Dockerfile
    networks:
      - mynetwork
    depends_on:    
      postgres:
        condition: service_healthy
        
  botservice:
    image: botservice
    container_name: botservice
    build:
      context: ../server
      dockerfile: ../docker/Dockerfiles/Bot.Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - mynetwork
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
   image: postgres
   container_name: postgres
   restart: always
   environment:
     POSTGRES_PASSWORD: root
     POSTGRES_USER: postgres
     POSTGRES_DB: telegramappbot
   ports:
     - 5432:5432
   volumes:
     - pgdata:/var/lib/postgresql/data
   networks:
     - mynetwork
   healthcheck:
    test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
    interval: 10s
    retries: 5
    start_period: 30s
    timeout: 10s
    
  client:
    image: client
    container_name: client
    build:
      context: ../client
      dockerfile: ../docker/Dockerfiles/Client.Dockerfile
    hostname: client
    ports:
      - "3000:3000"
    env_file:
      - .env
      
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    networks:
      - mynetwork

volumes:
  pgdata:

networks:
  mynetwork:
    driver: bridge