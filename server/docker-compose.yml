version: "3.8"
services:
  server:
    image: server
    container_name: server
    ports:
      - "3001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      dockerfile: Api/Debug.Dockerfile
    networks:
      - mynetwork
    depends_on:
      rabbitmq:
        condition: service_healthy
    
      postgres:
        condition: service_healthy
        
  
  botservice:
    image: botservice
    container_name: botservice
    build:
      dockerfile: Bot.AppHost/Debug.Dockerfile
    networks:
      - mynetwork
    depends_on:
      rabbitmq:
        condition: service_healthy

      postgres:
        condition: service_healthy

#docker run -p 8080:8080 adminer
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    networks:
      - mynetwork


  postgres:
   image: postgres
   container_name: postgres
   restart: always
   environment:
     POSTGRES_PASSWORD: root
     POSTGRES_USER: postgres
     POSTGRES_DB: telegramappbot
   ports:
     - 5432:5432
   volumes:
     - pgdata:/var/lib/postgresql/data
   networks:
     - mynetwork
   healthcheck:
    test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
    interval: 10s
    retries: 5
    start_period: 30s
    timeout: 10s
  
  rabbitmq:
    image: masstransit/rabbitmq
    container_name: rabbitmq
    ports:  
      - "15672:15672"
      - "5672:5672"
    networks:
      - mynetwork
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
  
volumes:
 pgdata:

networks:
  mynetwork:
    driver: bridge